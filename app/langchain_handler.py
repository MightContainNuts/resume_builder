import os
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv
import json
from langgraph.graph import StateGraph
from langgraph.prebuilt import create_react_agent
from pydantic import BaseModel, Field
from typing import List, Union
from langgraph.graph import START, END
from langchain_core.messages import (
    HumanMessage,
    AIMessage,
    SystemMessage,
)
from pathlib import Path

class AIReponse(BaseModel):
    """Response model for the LangChainHandler."""
    Cover_letter: str = Field(description="The cover letter generated by the LLM.")
    Improvements: str = Field(description="Recommendations to improve their chances of getting the job.")


class LangChainHandler:

    def __init__(self):

        load_dotenv()
        self.llm = ChatOpenAI(
            model="gpt-4o-mini",
            temperature=0.7,
            max_retries = 3,
        )

        self.documents = self._load_documents()
        self.job_description = self._load_job_description()


    def create_cover_letter(self) -> AIReponse:
        """Generate a response using the validated query and supplementary documents."""
        print("Handling prompt with documents")

        # Extract user query and documents

        prompt_with_docs = f"""
        Job Description: {self.job_description} Using the documents provided, which are: {self.documents}.
        Match skills from the document and job description and emphasise these in the cover letter
        The cover letter should be no longer than one page and should be in a professional format.
        Add recommendations for the candidate to improve their chances of getting the job."""

        # Generate response from LLM
        structured_llm = self.llm.with_structured_output(AIReponse)
        response = structured_llm.invoke([SystemMessage(content=prompt_with_docs)])


        return response


    @staticmethod
    def _load_documents()->dict|None:
        """Load assistant guidelines from file."""
        doc_path = Path() / "files" / "documents.json"
        try:
            with open(doc_path, "r") as file:
                return json.load(file)

        except Exception as e:
            print(f"Error loading documents: {e}")

    @staticmethod
    def _load_job_description()->str|None:
        """Load assistant guidelines from file."""
        doc_path = Path() / "files" / "job_description.txt"
        try:
            with open(doc_path, "r") as file:
                return file.read()

        except Exception as e:
            print(f"Error loading documents: {e}")


